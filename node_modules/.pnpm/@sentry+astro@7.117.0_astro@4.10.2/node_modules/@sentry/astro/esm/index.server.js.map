{"version":3,"file":"index.server.js","sources":["../../src/index.server.ts"],"sourcesContent":["// Node SDK exports\n// Unfortunately, we cannot `export * from '@sentry/node'` because in prod builds,\n// Vite puts these exports into a `default` property (Sentry.default) rather than\n// on the top - level namespace.\n\nimport { sentryAstro } from './integration';\nimport { handleRequest } from './server/middleware';\n\n// Hence, we export everything from the Node SDK explicitly:\nexport {\n  // eslint-disable-next-line deprecation/deprecation\n  addGlobalEventProcessor,\n  addEventProcessor,\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  captureCheckIn,\n  withMonitor,\n  // eslint-disable-next-line deprecation/deprecation\n  configureScope,\n  createTransport,\n  // eslint-disable-next-line deprecation/deprecation\n  extractTraceparentData,\n  // eslint-disable-next-line deprecation/deprecation\n  getActiveTransaction,\n  getHubFromCarrier,\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub,\n  getClient,\n  isInitialized,\n  getCurrentScope,\n  getGlobalScope,\n  getIsolationScope,\n  // eslint-disable-next-line deprecation/deprecation\n  Hub,\n  // eslint-disable-next-line deprecation/deprecation\n  makeMain,\n  setCurrentClient,\n  Scope,\n  // eslint-disable-next-line deprecation/deprecation\n  startTransaction,\n  SDK_VERSION,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  // eslint-disable-next-line deprecation/deprecation\n  spanStatusfromHttpCode,\n  getSpanStatusFromHttpCode,\n  setHttpStatus,\n  // eslint-disable-next-line deprecation/deprecation\n  trace,\n  withScope,\n  withIsolationScope,\n  autoDiscoverNodePerformanceMonitoringIntegrations,\n  makeNodeTransport,\n  // eslint-disable-next-line deprecation/deprecation\n  defaultIntegrations,\n  getDefaultIntegrations,\n  defaultStackParser,\n  lastEventId,\n  flush,\n  close,\n  getSentryRelease,\n  addRequestDataToEvent,\n  DEFAULT_USER_INCLUDES,\n  extractRequestData,\n  // eslint-disable-next-line deprecation/deprecation\n  deepReadDirSync,\n  Integrations,\n  consoleIntegration,\n  onUncaughtExceptionIntegration,\n  onUnhandledRejectionIntegration,\n  modulesIntegration,\n  contextLinesIntegration,\n  nodeContextIntegration,\n  localVariablesIntegration,\n  requestDataIntegration,\n  functionToStringIntegration,\n  inboundFiltersIntegration,\n  linkedErrorsIntegration,\n  captureConsoleIntegration,\n  dedupeIntegration,\n  debugIntegration,\n  extraErrorDataIntegration,\n  reportingObserverIntegration,\n  rewriteFramesIntegration,\n  sessionTimingIntegration,\n  httpClientIntegration,\n  Handlers,\n  trpcMiddleware,\n  setMeasurement,\n  getActiveSpan,\n  startSpan,\n  // eslint-disable-next-line deprecation/deprecation\n  startActiveSpan,\n  startInactiveSpan,\n  startSpanManual,\n  withActiveSpan,\n  continueTrace,\n  cron,\n  parameterize,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE,\n} from '@sentry/node';\n\n// We can still leave this for the carrier init and type exports\nexport * from '@sentry/node';\n\nexport { init } from './server/sdk';\n\nexport default sentryAstro;\n\n// This exports the `handleRequest` middleware for manual usage\nexport { handleRequest };\n"],"names":[],"mappings":";;;;;;AAAA;;;;"}