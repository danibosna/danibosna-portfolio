Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./integration/index.js');
const middleware = require('./server/middleware.js');
const node = require('@sentry/node');
const sdk = require('./server/sdk.js');

// Node SDK exports

exports.default = index.sentryAstro;
exports.handleRequest = middleware.handleRequest;
exports.DEFAULT_USER_INCLUDES = node.DEFAULT_USER_INCLUDES;
exports.Handlers = node.Handlers;
exports.Hub = node.Hub;
exports.Integrations = node.Integrations;
exports.SDK_VERSION = node.SDK_VERSION;
exports.SEMANTIC_ATTRIBUTE_SENTRY_OP = node.SEMANTIC_ATTRIBUTE_SENTRY_OP;
exports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = node.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;
exports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = node.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;
exports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = node.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;
exports.Scope = node.Scope;
exports.addBreadcrumb = node.addBreadcrumb;
exports.addEventProcessor = node.addEventProcessor;
exports.addGlobalEventProcessor = node.addGlobalEventProcessor;
exports.addRequestDataToEvent = node.addRequestDataToEvent;
exports.autoDiscoverNodePerformanceMonitoringIntegrations = node.autoDiscoverNodePerformanceMonitoringIntegrations;
exports.captureCheckIn = node.captureCheckIn;
exports.captureEvent = node.captureEvent;
exports.captureException = node.captureException;
exports.captureMessage = node.captureMessage;
exports.close = node.close;
exports.configureScope = node.configureScope;
exports.consoleIntegration = node.consoleIntegration;
exports.contextLinesIntegration = node.contextLinesIntegration;
exports.continueTrace = node.continueTrace;
exports.createTransport = node.createTransport;
exports.cron = node.cron;
exports.deepReadDirSync = node.deepReadDirSync;
exports.defaultIntegrations = node.defaultIntegrations;
exports.defaultStackParser = node.defaultStackParser;
exports.extractRequestData = node.extractRequestData;
exports.extractTraceparentData = node.extractTraceparentData;
exports.flush = node.flush;
exports.functionToStringIntegration = node.functionToStringIntegration;
exports.getActiveSpan = node.getActiveSpan;
exports.getActiveTransaction = node.getActiveTransaction;
exports.getClient = node.getClient;
exports.getCurrentHub = node.getCurrentHub;
exports.getCurrentScope = node.getCurrentScope;
exports.getDefaultIntegrations = node.getDefaultIntegrations;
exports.getGlobalScope = node.getGlobalScope;
exports.getHubFromCarrier = node.getHubFromCarrier;
exports.getIsolationScope = node.getIsolationScope;
exports.getSentryRelease = node.getSentryRelease;
exports.getSpanStatusFromHttpCode = node.getSpanStatusFromHttpCode;
exports.inboundFiltersIntegration = node.inboundFiltersIntegration;
exports.isInitialized = node.isInitialized;
exports.lastEventId = node.lastEventId;
exports.linkedErrorsIntegration = node.linkedErrorsIntegration;
exports.localVariablesIntegration = node.localVariablesIntegration;
exports.makeMain = node.makeMain;
exports.makeNodeTransport = node.makeNodeTransport;
exports.modulesIntegration = node.modulesIntegration;
exports.nodeContextIntegration = node.nodeContextIntegration;
exports.onUncaughtExceptionIntegration = node.onUncaughtExceptionIntegration;
exports.onUnhandledRejectionIntegration = node.onUnhandledRejectionIntegration;
exports.parameterize = node.parameterize;
exports.requestDataIntegration = node.requestDataIntegration;
exports.setContext = node.setContext;
exports.setCurrentClient = node.setCurrentClient;
exports.setExtra = node.setExtra;
exports.setExtras = node.setExtras;
exports.setHttpStatus = node.setHttpStatus;
exports.setMeasurement = node.setMeasurement;
exports.setTag = node.setTag;
exports.setTags = node.setTags;
exports.setUser = node.setUser;
exports.spanStatusfromHttpCode = node.spanStatusfromHttpCode;
exports.startActiveSpan = node.startActiveSpan;
exports.startInactiveSpan = node.startInactiveSpan;
exports.startSpan = node.startSpan;
exports.startSpanManual = node.startSpanManual;
exports.startTransaction = node.startTransaction;
exports.trace = node.trace;
exports.withActiveSpan = node.withActiveSpan;
exports.withIsolationScope = node.withIsolationScope;
exports.withMonitor = node.withMonitor;
exports.withScope = node.withScope;
exports.init = sdk.init;
Object.keys(node).forEach(k => {
  if (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = node[k];
});
//# sourceMappingURL=index.server.js.map
