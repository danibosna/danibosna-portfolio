{"version":3,"file":"snippets.js","sources":["../../../src/integration/snippets.ts"],"sourcesContent":["import * as path from 'path';\n\nimport type { SentryOptions } from './types';\n\n/**\n * Creates a snippet that imports a Sentry.init file.\n */\nexport function buildSdkInitFileImportSnippet(filePath: string): string {\n  return `import \"${pathToPosix(filePath)}\";`;\n}\n\n/**\n * Creates a snippet that initializes Sentry on the client by choosing\n * default options.\n */\nexport function buildClientSnippet(options: SentryOptions): string {\n  return `import * as Sentry from \"@sentry/astro\";\n\nSentry.init({\n  ${buildCommonInitOptions(options)}\n  integrations: [${buildClientIntegrations(options)}],\n  replaysSessionSampleRate: ${options.replaysSessionSampleRate ?? 0.1},\n  replaysOnErrorSampleRate: ${options.replaysOnErrorSampleRate ?? 1.0},\n});`;\n}\n\n/**\n * Creates a snippet that initializes Sentry on the server by choosing\n * default options.\n */\nexport function buildServerSnippet(options: SentryOptions): string {\n  return `import * as Sentry from \"@sentry/astro\";\n\nSentry.init({\n  ${buildCommonInitOptions(options)}\n});`;\n}\n\nconst buildCommonInitOptions = (options: SentryOptions): string => `dsn: ${\n  options.dsn ? JSON.stringify(options.dsn) : 'import.meta.env.PUBLIC_SENTRY_DSN'\n},\n  debug: ${options.debug ? true : false},\n  environment: ${options.environment ? JSON.stringify(options.environment) : 'import.meta.env.PUBLIC_VERCEL_ENV'},\n  release: ${options.release ? JSON.stringify(options.release) : 'import.meta.env.PUBLIC_VERCEL_GIT_COMMIT_SHA'},\n  tracesSampleRate: ${options.tracesSampleRate ?? 1.0},${\n    options.sampleRate ? `\\n  sampleRate: ${options.sampleRate},` : ''\n  }`;\n\n/**\n * We don't include the `BrowserTracing` integration if the tracesSampleRate is set to 0.\n * Likewise, we don't include the `Replay` integration if the replaysSessionSampleRate\n * and replaysOnErrorSampleRate are set to 0.\n *\n * This way, we avoid unnecessarily adding the integrations and thereby enable tree shaking of the integrations.\n */\nconst buildClientIntegrations = (options: SentryOptions): string => {\n  const integrations: string[] = [];\n\n  if (options.tracesSampleRate == null || options.tracesSampleRate) {\n    integrations.push('new Sentry.BrowserTracing()');\n  }\n\n  if (\n    options.replaysSessionSampleRate == null ||\n    options.replaysSessionSampleRate ||\n    options.replaysOnErrorSampleRate == null ||\n    options.replaysOnErrorSampleRate\n  ) {\n    integrations.push('new Sentry.Replay()');\n  }\n\n  return integrations.join(', ');\n};\n\nfunction pathToPosix(originalPath: string): string {\n  return originalPath.split(path.sep).join(path.posix.sep);\n}\n"],"names":[],"mappings":";;AAIA;AACA;AACA;AACO,SAAS,6BAA6B,CAAC,QAAQ,EAAkB;AACxE,EAAE,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAA;AAC7C,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,kBAAkB,CAAC,OAAO,EAAyB;AACnE,EAAE,OAAO,CAAC;AACV;AACA;AACA,EAAE,EAAE,sBAAsB,CAAC,OAAO,CAAC,CAAC;AACpC,iBAAiB,EAAE,uBAAuB,CAAC,OAAO,CAAC,CAAC;AACpD,4BAA4B,EAAE,OAAO,CAAC,wBAAyB,IAAG,GAAG,CAAC;AACtE,4BAA4B,EAAE,OAAO,CAAC,wBAAyB,IAAG,GAAG,CAAC;AACtE,GAAG,CAAC,CAAA;AACJ,CAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,kBAAkB,CAAC,OAAO,EAAyB;AACnE,EAAE,OAAO,CAAC;AACV;AACA;AACA,EAAE,EAAE,sBAAsB,CAAC,OAAO,CAAC,CAAC;AACpC,GAAG,CAAC,CAAA;AACJ,CAAA;AACA;AACA,MAAM,yBAAyB,CAAC,OAAO,KAA4B,CAAC,KAAK;AACzE,EAAE,OAAO,CAAC,GAAI,GAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAA,GAAI,mCAAA;AAC9C,CAAC;AACD,SAAS,EAAE,OAAO,CAAC,KAAA,GAAQ,IAAK,GAAE,KAAK,CAAC;AACxC,eAAe,EAAE,OAAO,CAAC,WAAA,GAAc,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAE,GAAE,mCAAmC,CAAC;AACjH,WAAW,EAAE,OAAO,CAAC,OAAA,GAAU,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAE,GAAE,8CAA8C,CAAC;AAChH,oBAAoB,EAAE,OAAO,CAAC,oBAAoB,GAAG,CAAC,CAAC;AACvD,IAAI,OAAO,CAAC,UAAW,GAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAA;AACpE,GAAG,CAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,uBAAA,GAAA,CAAA,OAAA,KAAA;AACA,EAAA,MAAA,YAAA,GAAA,EAAA,CAAA;AACA;AACA,EAAA,IAAA,OAAA,CAAA,gBAAA,IAAA,IAAA,IAAA,OAAA,CAAA,gBAAA,EAAA;AACA,IAAA,YAAA,CAAA,IAAA,CAAA,6BAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA;AACA,IAAA,OAAA,CAAA,wBAAA,IAAA,IAAA;AACA,IAAA,OAAA,CAAA,wBAAA;AACA,IAAA,OAAA,CAAA,wBAAA,IAAA,IAAA;AACA,IAAA,OAAA,CAAA,wBAAA;AACA,IAAA;AACA,IAAA,YAAA,CAAA,IAAA,CAAA,qBAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA,CAAA,CAAA;AACA;AACA,SAAA,WAAA,CAAA,YAAA,EAAA;AACA,EAAA,OAAA,YAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA;AACA;;;;"}