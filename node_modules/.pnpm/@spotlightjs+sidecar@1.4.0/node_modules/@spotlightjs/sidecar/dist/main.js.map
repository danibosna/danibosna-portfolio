{"version":3,"file":"main.js","sources":["../src/logger.ts","../src/messageBuffer.ts","../src/main.ts"],"sourcesContent":["export type SidecarLogger = {\n  info: (message: string) => void;\n  warn: (message: string) => void;\n  error: (message: string) => void;\n  debug: (message: string) => void;\n};\n\nconst defaultLogger: SidecarLogger = {\n  info: (message: string) => console.log('üîé [Spotlight]', message),\n  warn: (message: string) => console.warn('üîé [Spotlight]', message),\n  error: (message: string) => console.error('üîé [Spotlight]', message),\n  debug: (message: string) => debugEnabled && console.debug('üîé [Spotlight]', message),\n};\n\nlet injectedLogger: SidecarLogger | undefined = undefined;\nlet debugEnabled = false;\n\nexport function activateLogger(logger: SidecarLogger): void {\n  injectedLogger = logger;\n}\n\nexport function enableDebugLogging(debug: boolean): void {\n  debugEnabled = debug;\n}\n\nexport const logger = {\n  info: (message: string) => (injectedLogger || defaultLogger).info(message),\n  warn: (message: string) => (injectedLogger || defaultLogger).warn(message),\n  error: (message: string) => (injectedLogger || defaultLogger).error(message),\n  debug: (message: string) => (injectedLogger || defaultLogger).debug(message),\n};\n","export class MessageBuffer<T> {\n  private size: number;\n  private items: [number, T][];\n  private writePos = 0;\n  private head = 0;\n  private timeout = 10;\n  private readers = new Map<string, (item: T) => void>();\n\n  constructor(size = 100) {\n    this.size = size;\n    this.items = new Array(size);\n  }\n\n  put(item: T): void {\n    const curTime = new Date().getTime();\n    this.items[this.writePos % this.size] = [curTime, item];\n    this.writePos += 1;\n    if (this.head === this.writePos) {\n      this.head += 1;\n    }\n\n    const minTime = curTime - this.timeout * 1000;\n    let atItem;\n    while (this.head < this.writePos) {\n      atItem = this.items[this.head % this.size];\n      if (atItem === undefined) break;\n      if (atItem[0] > minTime) break;\n      this.head += 1;\n    }\n  }\n\n  subscribe(callback: (item: T) => void): string {\n    const readerId = generateUuidv4();\n    this.readers.set(readerId, callback);\n    setTimeout(() => this.stream(readerId));\n    return readerId;\n  }\n\n  unsubscribe(readerId: string): void {\n    this.readers.delete(readerId);\n  }\n\n  stream(readerId: string, readPos = this.head): void {\n    const cb = this.readers.get(readerId);\n    if (!cb) return;\n\n    let atReadPos = readPos;\n    let item;\n    /* eslint-disable no-constant-condition */\n    while (true) {\n      item = this.items[atReadPos % this.size];\n      // atReadPos >= this.writePos prevents the case where we have a full buffer\n      if (typeof item === 'undefined' || atReadPos >= this.writePos) {\n        break;\n      }\n      cb(item[1]);\n      atReadPos += 1;\n    }\n\n    setTimeout(() => this.stream(readerId, atReadPos), 500);\n  }\n\n  clear(): void {\n    this.items = new Array(this.size);\n    this.writePos = 0;\n    this.head = 0;\n    this.readers = new Map<string, (item: T) => void>();\n  }\n}\n\nfunction generateUuidv4(): string {\n  let dt = new Date().getTime();\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let rnd = Math.random() * 16;\n    rnd = (dt + rnd) % 16 | 0;\n    dt = Math.floor(dt / 16);\n    return (c === 'x' ? rnd : (rnd & 0x3) | 0x8).toString(16);\n  });\n}\n","import { createWriteStream, readFile } from 'fs';\nimport { IncomingMessage, Server, ServerResponse, createServer, get } from 'http';\nimport { extname, join } from 'path';\nimport { createGunzip, createInflate } from 'zlib';\nimport { SidecarLogger, activateLogger, enableDebugLogging, logger } from './logger.js';\nimport { MessageBuffer } from './messageBuffer.js';\n\nconst DEFAULT_PORT = 8969;\nconst SERVER_IDENTIFIER = 'spotlight-by-sentry';\n\ntype Payload = [string, string];\n\ntype IncomingPayloadCallback = (body: string) => void;\n\ntype SideCarOptions = {\n  /**\n   * The port on which the sidecar should listen.\n   * Defaults to 8969.\n   */\n  port?: string | number;\n\n  /**\n   * A logger that implements the SidecarLogger interface.\n   * Use this to inject your custom logger implementation.\n   *\n   * @default - a simple logger logging to the console.\n   */\n  logger?: SidecarLogger;\n\n  /**\n   * The base path from where the static files should be served.\n   */\n  basePath?: string;\n\n  /**\n   * More verbose logging.\n   */\n  debug?: boolean;\n\n  /**\n   * A callback that will be called with the incoming message.\n   * Helpful for debugging.\n   */\n  incomingPayload?: IncomingPayloadCallback;\n};\n\nfunction getCorsHeader(): { [name: string]: string } {\n  return {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Credentials': 'true',\n    'Access-Control-Allow-Headers': '*',\n    'Access-Control-Allow-Methods': 'GET,POST,PUT,OPTIONS,DELETE,PATCH',\n  };\n}\n\nfunction getSpotlightHeader() {\n  return {\n    'X-Powered-by': SERVER_IDENTIFIER,\n  };\n}\n/**\n * Returns true of the request was handled, false otherwise.\n */\nfunction handleStreamRequest(\n  req: IncomingMessage,\n  res: ServerResponse,\n  buffer: MessageBuffer<Payload>,\n  incomingPayload?: IncomingPayloadCallback,\n): boolean {\n  if (req.headers.accept && req.headers.accept == 'text/event-stream') {\n    if (req.url == '/stream') {\n      res.writeHead(200, {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        ...getCorsHeader(),\n        ...getSpotlightHeader(),\n        Connection: 'keep-alive',\n      });\n      res.flushHeaders();\n\n      const sub = buffer.subscribe(([payloadType, data]) => {\n        logger.debug(`üïäÔ∏è sending to Spotlight`);\n        res.write(`event:${payloadType}\\n`);\n        // This is very important - SSE events are delimited by two newlines\n        data.split('\\n').forEach(line => {\n          res.write(`data:${line}\\n`);\n        });\n        res.write('\\n');\n      });\n\n      req.on('close', () => {\n        buffer.unsubscribe(sub);\n        res.end();\n      });\n    } else {\n      res.writeHead(404);\n      res.end();\n    }\n    return true;\n  } else {\n    if (req.url == '/stream') {\n      if (req.method === 'OPTIONS') {\n        res.writeHead(204, {\n          'Cache-Control': 'no-cache',\n          ...getCorsHeader(),\n          ...getSpotlightHeader(),\n        });\n        res.end();\n      } else if (req.method === 'POST') {\n        logger.debug(`üì© Received event`);\n        let body: string = '';\n        let stream = req;\n\n        // Check for gzip or deflate encoding and create appropriate stream\n        const encoding = req.headers['content-encoding'];\n        if (encoding === 'gzip') {\n          // @ts-ignore\n          stream = req.pipe(createGunzip());\n        } else if (encoding === 'deflate') {\n          // @ts-ignore\n          stream = req.pipe(createInflate());\n        }\n\n        // Read the (potentially decompressed) stream\n        stream.on('readable', () => {\n          let chunk;\n          while ((chunk = stream.read()) !== null) {\n            body += chunk;\n          }\n        });\n\n        stream.on('end', () => {\n          buffer.put([`${req.headers['content-type']}`, body]);\n\n          if (process.env.SPOTLIGHT_CAPTURE || incomingPayload) {\n            const timestamp = new Date().getTime();\n            const contentType = `${req.headers['content-type']}`;\n            const filename = `${contentType.replace(/[^a-z0-9]/gi, '_').toLowerCase()}-${timestamp}.txt`;\n\n            if (incomingPayload) {\n              incomingPayload(body);\n            } else {\n              createWriteStream(filename).write(body);\n              logger.info(`üóÉÔ∏è Saved data to ${filename}`);\n            }\n          }\n\n          // 204 would be more appropriate but returning 200 to match what /envelope returns\n          res.writeHead(200, {\n            'Cache-Control': 'no-cache',\n            ...getCorsHeader(),\n            ...getSpotlightHeader(),\n            Connection: 'keep-alive',\n          });\n          res.end();\n        });\n      }\n      return true;\n    }\n  }\n  return false;\n}\nfunction serveFile(req: IncomingMessage, res: ServerResponse, basePath: string): void {\n  let filePath = '.' + req.url;\n  if (filePath == './') {\n    filePath = './src/index.html';\n  }\n\n  const extName = extname(filePath);\n  let contentType = 'text/html';\n  switch (extName) {\n    case '.js':\n      contentType = 'text/javascript';\n      break;\n    case '.css':\n      contentType = 'text/css';\n      break;\n    case '.json':\n      contentType = 'application/json';\n      break;\n  }\n\n  readFile(join(basePath, filePath), function (error, content) {\n    if (error) {\n      res.writeHead(404);\n      res.end();\n    } else {\n      res.writeHead(200, { 'Content-Type': contentType });\n      res.end(content, 'utf-8');\n    }\n  });\n}\n\nfunction startServer(\n  buffer: MessageBuffer<Payload>,\n  port: number,\n  basePath?: string,\n  incomingPayload?: IncomingPayloadCallback,\n): Server {\n  const server = createServer(handleRequest);\n\n  server.on('error', handleServerError);\n\n  server.listen(port, () => {\n    handleServerListen(port, basePath);\n  });\n\n  return server;\n\n  function handleRequest(req: IncomingMessage, res: ServerResponse): void {\n    if (req.url === '/health') {\n      handleHealthRequest(res);\n    } else if (req.url === '/clear') {\n      handleClearRequest(req, res);\n    } else {\n      handleOtherRequest(req, res);\n    }\n  }\n\n  function handleHealthRequest(res: ServerResponse): void {\n    res.writeHead(200, {\n      'Content-Type': 'text/plain',\n      ...getCorsHeader(),\n      ...getSpotlightHeader(),\n    });\n    res.end('OK');\n  }\n\n  function handleClearRequest(req: IncomingMessage, res: ServerResponse): void {\n    if (req.method === 'OPTIONS') {\n      res.writeHead(204, {\n        'Cache-Control': 'no-cache',\n        ...getCorsHeader(),\n        ...getSpotlightHeader(),\n      });\n      res.end();\n    } else if (req.method === 'DELETE') {\n      res.writeHead(200, {\n        'Content-Type': 'text/plain',\n        ...getCorsHeader(),\n        ...getSpotlightHeader(),\n      });\n      clearBuffer();\n      res.end('Cleared');\n    }\n  }\n\n  function handleOtherRequest(req: IncomingMessage, res: ServerResponse): void {\n    const handled = handleStreamRequest(req, res, buffer, incomingPayload);\n\n    if (!handled && basePath) {\n      serveFile(req, res, basePath);\n    }\n\n    if (!handled && !basePath) {\n      res.writeHead(404);\n      res.end();\n    }\n  }\n\n  function handleServerError(e: { code?: string }): void {\n    if ('code' in e && e.code === 'EADDRINUSE') {\n      logger.info(`Port ${port} in use, retrying...`);\n      setTimeout(() => {\n        server.close();\n        server.listen(port);\n        logger.info(`Port ${port} in use, retrying...`);\n      }, 5000);\n    }\n  }\n\n  function handleServerListen(port: number, basePath?: string): void {\n    logger.info(`Sidecar listening on ${port}`);\n    if (basePath) {\n      logger.info(`You can open: http://localhost:${port} to see the Spotlight overlay directly`);\n    }\n  }\n}\n\nlet serverInstance: Server;\nconst buffer: MessageBuffer<Payload> = new MessageBuffer<Payload>();\n\nconst isValidPort = (value: string | number) => {\n  if (typeof value === 'string') {\n    const portNumber = Number(value);\n    return /^\\d+$/.test(value) && portNumber > 0 && portNumber <= 65535;\n  }\n  return value > 0 && value <= 65535;\n};\n\nfunction isSidecarRunning(port: string | number | undefined) {\n  return new Promise(resolve => {\n    const options = {\n      hostname: 'localhost',\n      port: port,\n      path: '/health',\n      method: 'GET',\n      timeout: 5000,\n    };\n\n    const healthReq = get(options, res => {\n      const serverIdentifier = res.headers['x-powered-by'];\n      if (serverIdentifier === 'spotlight-by-sentry') {\n        resolve(true);\n      } else {\n        resolve(false);\n      }\n    });\n    healthReq.on('error', () => {\n      resolve(false);\n    });\n  });\n}\n\nexport function setupSidecar({\n  port,\n  logger: customLogger,\n  basePath,\n  debug,\n  incomingPayload,\n}: SideCarOptions = {}): void {\n  let sidecarPort = DEFAULT_PORT;\n\n  if (customLogger) {\n    activateLogger(customLogger);\n  }\n\n  if (debug || process.env.SPOTLIGHT_DEBUG) {\n    enableDebugLogging(true);\n  }\n\n  if (port && !isValidPort(port)) {\n    logger.info('Please provide a valid port.');\n    process.exit(1);\n  } else if (port) {\n    sidecarPort = typeof port === 'string' ? Number(port) : port;\n  }\n  isSidecarRunning(sidecarPort).then(isRunning => {\n    if (isRunning) {\n      logger.info(`Sidecar is already running on port ${sidecarPort}`);\n    } else {\n      if (!serverInstance) {\n        serverInstance = startServer(buffer, sidecarPort, basePath, incomingPayload);\n      }\n    }\n  });\n}\n\nexport function clearBuffer(): void {\n  buffer.clear();\n}\n\nexport function shutdown() {\n  if (serverInstance) {\n    logger.info('Shutting down Server');\n    serverInstance.close();\n  }\n}\n\nprocess.on('SIGTERM', () => {\n  shutdown();\n});\n"],"names":["logger","buffer","port","basePath"],"mappings":"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"}