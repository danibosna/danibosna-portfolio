import { React, ReactDOM } from './react-instance.tsx';
import { SpotlightOverlayOptions } from './types.ts';
export { default as console } from './integrations/console/index.ts';
export { default as hydrationError } from './integrations/hydration-error/index.ts';
export { default as sentry } from './integrations/sentry/index.ts';
export { default as viteInspect } from './integrations/vite-inspect/index.ts';
export { React, ReactDOM };
/**
 * Open the Spotlight debugger Window
 */
export declare function openSpotlight(path?: string | undefined): Promise<void>;
/**
 * Close the Spotlight debugger Window
 */
export declare function closeSpotlight(): Promise<void>;
/**
 * Invokes the passed in callback when the Spotlight debugger Window is closed
 */
export declare function onClose(cb: () => void): Promise<void>;
/**
 * Invokes the passed in callback when the Spotlight debugger Window is opened
 */
export declare function onOpen(cb: () => void): Promise<void>;
/**
 * Register a callback that is invoked when a severe event is processed
 * by a Spotlight integration.
 * A count of the number of collected severe events is passed to the callback.
 */
export declare function onSevereEvent(cb: (count: number) => void): Promise<void>;
/**
 * Trigger an event in Spotlight.
 *
 * This is primarily useful for handling an uncaught error/crash, and forcing the debugger
 * to render vs a native error handler.
 *
 * e.g. trigger("sentry.showError", {eventId});
 */
export declare function trigger(eventName: string, payload: unknown): Promise<void>;
export declare function init({ openOnInit, showTriggerButton, injectImmediately, sidecarUrl, anchor, debug, integrations, experiments, fullPage, showClearEventsButton, }?: SpotlightOverlayOptions): Promise<void>;
