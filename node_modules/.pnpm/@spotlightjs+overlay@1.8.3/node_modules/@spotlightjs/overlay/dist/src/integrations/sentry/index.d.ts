import type { Envelope } from '@sentry/types';
import type { RawEventContext } from '../integration';
import ErrorsTab from './tabs/ErrorsTab';
import PerformanceTab from './tabs/PerformanceTab';
import TracesTab from './tabs/TracesTab';
type SentryIntegrationOptions = {
    sidecarUrl?: string;
    injectIntoSDK?: boolean;
};
export default function sentryIntegration(options?: SentryIntegrationOptions): {
    name: string;
    forwardedContentType: string[];
    setup: ({ open }: import("../integration").SpotlightContext) => () => void;
    processEvent: (event: RawEventContext) => {
        event: Envelope;
        rawEvent: RawEventContext;
    };
    tabs: () => ({
        id: string;
        title: string;
        notificationCount: {
            count: number;
            severe: boolean;
        };
        content: typeof ErrorsTab;
    } | {
        id: string;
        title: string;
        notificationCount: {
            count: number;
            severe?: undefined;
        };
        content: typeof TracesTab;
    } | {
        id: string;
        title: string;
        content: typeof PerformanceTab;
        notificationCount?: undefined;
    })[];
    reset: () => void;
};
export declare function processEnvelope(rawEvent: RawEventContext): {
    event: Envelope;
    rawEvent: RawEventContext;
};
export {};
